
-include .buildvars


.EXPORT_ALL_VARIABLES:
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
	else if [ -x /bin/bash ]; then echo /bin/bash; \
	else echo sh; fi ; fi)
TOPDIR := $(shell if [ "$$PWD" != "" ]; then echo $$PWD; else pwd; fi)

HPATH		= $(TOPDIR)/include
FINDHPATH	= $(HPATH)

HOSTCC		=gcc
HOSTCFLAGS	=-Wall -Wstrict-prototypes -O2 -fomit-frame-pointer

#
# Include the make variables (CC, etc...)
#

AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CPP             = $(CC) -E
AR              = $(CROSS_COMPILE)ar
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump
MAKEFILES       = $(TOPDIR)/.config
GENKSYMS        = /sbin/genksyms
MODFLAGS        = -DMODULE
PERL            = perl

export  VERSION PATCHLEVEL SUBLEVEL EXTRAVERSION KERNELRELEASE ARCH \
	CONFIG_SHELL TOPDIR HPATH HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC \
	CPP AR NM STRIP OBJCOPY OBJDUMP MAKE MAKEFILES GENKSYMS MODFLAGS PERL

MODLIB := $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)
export MODLIB

export FLAT_MODULES

CFLAGS := -I $(TOPDIR)/include $(CFLAGS)

CFLAGS += -nostdinc -I $(shell $(CC) -print-search-dirs|grep ^install:|sed 's/^install: //')include

PROJECTRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)

-include $(LINUXDIR)/.config

ifeq (.config,$(wildcard .config))
include .config
ifeq (.depend,$(wildcard .depend))
include .depend
all:	modules
else
all:	depend modules
endif
else
all:	config
endif

oldconfig:	dummy
	$(CONFIG_SHELL) ./configure --old

config:	dummy
	$(CONFIG_SHELL) ./configure

modules_install:	$(patsubst %, _modinst_%, $(SUBDIRS))

_modinst_%:
	$(MAKE) -C $(patsubst _modinst_%, %, $@) modules_install


ifeq ($(CONFIG_MODVERSIONS),y)
MODFLAGS += -DMODVERSIONS -include $(LINUXDIR)/include/linux/modversions.h
endif


modules:	$(patsubst %, _mod_%, $(SUBDIRS))

$(patsubst %, _mod_%, $(SUBDIRS)) : dummy
	$(MAKE) -C $(patsubst _mod_%, %, $@) CFLAGS="$(CFLAGS) $(MODFLAGS)" MAKING_MODULES=1 modules

include/version.h: Makefile
	@echo \#define $(PROJECT)_RELEASE \"$(PROJECTRELEASE)\" >.ver
	@echo \#define $(PROJECT)_VERSION_CODE `expr $(VERSION) \\* 65536 + $(PATCHLEVEL) \\* 256 + $(SUBLEVEL)` >> .ver
	@echo '#define $(PROJECT)_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))' >>.ver
	@mv -f .ver $@

depend: dep-files

dep-files: scripts/mkdep include/version.h new-genksyms
#	scripts/mkdep `find $(FINDHPATH) -follow -name \*.h ! -name modversions.h -print` > .hdepend
# let this be made through the fastdep rule in Rules.make
	$(MAKE) $(patsubst %,_sfdep_%,$(SUBDIRS)) _FASTDEP_ALL_SUB_DIRS="$(SUBDIRS)"


new-genksyms:

clean:
	rm -f core `find . -name '*.[oas]'`
	rm -f core `find . -name '.*.flags' -print`

distclean:	clean
	rm -f .depend `find . -name .depend -print`
	rm -f .hdepend
	rm -f core `find . \( -name '*.orig' -o -name '*.rej' -o -name '*~' \
		-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \
		-o -name '.*.rej' -o -name '.SUMS' -o -size 0 \) -print` TAGS
	-rm -rf modules
	rm -f .config .config.old
	rm -f include/config.h include/version.h
	rm -f scripts/mkdep
	rm -f .buildvars

include $(TOPDIR)/Rules.make


dummy:

#
# This generates dependencies for the .h files.
#

scripts/mkdep: scripts/mkdep.c
	$(HOSTCC) $(HOSTCFLAGS) -o scripts/mkdep scripts/mkdep.c

scripts/split-include: scripts/split-include.c
	$(HOSTCC) $(HOSTCFLAGS) -o scripts/split-include scripts/split-include.c

